{"version":3,"sources":["round-progress.component.ts"],"names":[],"mappings":"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","file":"round-progress.component.js","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  NgZone,\r\n  ElementRef,\r\n  EventEmitter,\r\n} from '@angular/core';\r\n\r\nimport { RoundProgressService } from './round-progress.service';\r\nimport { RoundProgressConfig } from './round-progress.config';\r\nimport { RoundProgressEase } from './round-progress.ease';\r\n\r\n@Component({\r\n  selector: 'round-progress',\r\n  template: `\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" [attr.viewBox]=\"_viewBox\">\r\n      <circle\r\n        fill=\"none\"\r\n        [attr.cx]=\"radius\"\r\n        [attr.cy]=\"radius\"\r\n        [attr.r]=\"radius - stroke / 2\"\r\n        [style.stroke]=\"_service.resolveColor(background)\"\r\n        [style.stroke-width]=\"stroke\"/>\r\n\r\n      <path\r\n        fill=\"none\"\r\n        [style.stroke-width]=\"stroke\"\r\n        [style.stroke]=\"_service.resolveColor(color)\"\r\n        [style.stroke-linecap]=\"rounded ? 'round' : ''\"\r\n        [attr.transform]=\"getPathTransform()\"/>\r\n    </svg>\r\n  `,\r\n  host: {\r\n    role: 'progressbar',\r\n    '[attr.aria-valuemin]': 'current',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[style.width]': \"responsive ? '' : _diameter + 'px'\",\r\n    '[style.height]': '_elementHeight',\r\n    '[style.padding-bottom]': '_paddingBottom',\r\n    '[class.responsive]': 'responsive'\r\n  },\r\n  styles: [\r\n    `:host {\r\n      display: block;\r\n      position: relative;\r\n      overflow: hidden;\r\n    }`,\r\n    `:host.responsive {\r\n      width: 100%;\r\n      padding-bottom: 100%;\r\n    }`,\r\n    `:host.responsive > svg {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      top: 0;\r\n      left: 0;\r\n    }`\r\n  ]\r\n})\r\nexport class RoundProgressComponent implements OnChanges {\r\n  private _path: SVGPathElement;\r\n  private _lastAnimationId: number = 0;\r\n\r\n  constructor(\r\n    private _service: RoundProgressService,\r\n    private _easingFunctions: RoundProgressEase,\r\n    private _defaults: RoundProgressConfig,\r\n    private _ngZone: NgZone,\r\n    private _element: ElementRef\r\n  ) {}\r\n\r\n  /** Animates a change in the current value. */\r\n  private _animateChange(from: number, to: number): void {\r\n    if (typeof from !== 'number') {\r\n      from = 0;\r\n    }\r\n\r\n    to = this._clamp(to);\r\n    from = this._clamp(from);\r\n\r\n    const self = this;\r\n    const changeInValue = to - from;\r\n    const duration = self.duration;\r\n    const ease = self._easingFunctions[self.animation];\r\n\r\n    // Avoid firing change detection for each of the animation frames.\r\n    self._ngZone.runOutsideAngular(() => {\r\n      let start = () => {\r\n        const startTime = self._service.getTimestamp();\r\n        const id = ++self._lastAnimationId;\r\n\r\n        requestAnimationFrame(function animation(){\r\n          let currentTime = Math.min(self._service.getTimestamp() - startTime, duration);\r\n          let value = ease(currentTime, from, changeInValue, duration);\r\n\r\n          self._setPath(value);\r\n          self.onRender.emit(value);\r\n\r\n          if (id === self._lastAnimationId && currentTime < duration) {\r\n            requestAnimationFrame(animation);\r\n          }\r\n        });\r\n      };\r\n\r\n      if (this.animationDelay > 0) {\r\n        setTimeout(start, this.animationDelay);\r\n      } else {\r\n        start();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Sets the path dimensions. */\r\n  private _setPath(value: number): void {\r\n    if (!this._path) {\r\n      this._path = this._element.nativeElement.querySelector('path');\r\n    }\r\n\r\n    this._path.setAttribute('d', this._service.getArc(value, this.max,\r\n        this.radius - this.stroke / 2, this.radius, this.semicircle));\r\n  }\r\n\r\n  /** Clamps a value between the maximum and 0. */\r\n  private _clamp(value: number): number {\r\n    return Math.max(0, Math.min(value || 0, this.max));\r\n  }\r\n\r\n  /** Determines the SVG transforms for the <path> node. */\r\n  getPathTransform(): string {\r\n    let diameter = this._diameter;\r\n\r\n    if (this.semicircle) {\r\n      return this.clockwise ?\r\n        `translate(0, ${diameter}) rotate(-90)` :\r\n        `translate(${diameter + ',' + diameter}) rotate(90) scale(-1, 1)`;\r\n    } else if (!this.clockwise) {\r\n      return `scale(-1, 1) translate(-${diameter} 0)`;\r\n    }\r\n  }\r\n\r\n  /** Change detection callback. */\r\n  ngOnChanges(changes): void {\r\n    if (changes.current) {\r\n      this._animateChange(changes.current.previousValue, changes.current.currentValue);\r\n    } else {\r\n      this._setPath(this.current);\r\n    }\r\n  }\r\n\r\n  /** Diameter of the circle. */\r\n  get _diameter(): number {\r\n    return this.radius * 2;\r\n  }\r\n\r\n  /** The CSS height of the wrapper element. */\r\n  get _elementHeight(): string {\r\n    if (!this.responsive) {\r\n      return (this.semicircle ? this.radius : this._diameter) + 'px';\r\n    }\r\n  }\r\n\r\n  /** Viewbox for the SVG element. */\r\n  get _viewBox(): string {\r\n    let diameter = this._diameter;\r\n    return `0 0 ${diameter} ${this.semicircle ? this.radius : diameter}`;\r\n  }\r\n\r\n  /** Bottom padding for the wrapper element. */\r\n  get _paddingBottom(): string {\r\n    if (this.responsive) {\r\n      return this.semicircle ? '50%' : '100%';\r\n    }\r\n  }\r\n\r\n  @Input() current:          number;\r\n  @Input() max:              number;\r\n  @Input() radius:           number = this._defaults.get('radius');\r\n  @Input() animation:        string = this._defaults.get('animation');\r\n  @Input() animationDelay:   number = this._defaults.get('animationDelay');\r\n  @Input() duration:         number = this._defaults.get('duration');\r\n  @Input() stroke:           number = this._defaults.get('stroke');\r\n  @Input() color:            string = this._defaults.get('color');\r\n  @Input() background:       string = this._defaults.get('background');\r\n  @Input() responsive:       boolean = this._defaults.get('responsive');\r\n  @Input() clockwise:        boolean = this._defaults.get('clockwise');\r\n  @Input() semicircle:       boolean = this._defaults.get('semicircle');\r\n  @Input() rounded:          boolean = this._defaults.get('rounded');\r\n  @Output() onRender:        EventEmitter<number> = new EventEmitter();\r\n}\r\n"],"sourceRoot":"/source/"}