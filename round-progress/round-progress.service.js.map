{"version":3,"sources":["round-progress.service.ts"],"names":[],"mappings":"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","file":"round-progress.service.js","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\nconst DEGREE_IN_RADIANS: number = Math.PI / 180;\r\nconst HAS_DOCUMENT = typeof document !== 'undefined';\r\nconst BASE: HTMLBaseElement = HAS_DOCUMENT && document.head.querySelector('base');\r\nconst HAS_PERF =\r\n  typeof window !== 'undefined' &&\r\n  window.performance &&\r\n  window.performance.now &&\r\n  typeof window.performance.now() === 'number';\r\n\r\n@Injectable()\r\nexport class RoundProgressService {\r\n  supportsSvg: boolean;\r\n\r\n  constructor() {\r\n    this.supportsSvg = !!(\r\n      HAS_DOCUMENT &&\r\n      document.createElementNS &&\r\n      document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves a SVG color against the page's `base` tag.\r\n   * @param  {string} color\r\n   * @return {string}\r\n   */\r\n  resolveColor(color: string): string {\r\n    if (BASE && BASE.href) {\r\n      let hashIndex = color.indexOf('#');\r\n\r\n      if (hashIndex > -1 && color.indexOf('url') > -1) {\r\n        return color.slice(0, hashIndex) + location.href + color.slice(hashIndex);\r\n      }\r\n    }\r\n\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Generates a timestamp.\r\n   * @return {number}\r\n   */\r\n  getTimestamp(): number {\r\n    return HAS_PERF ? window.performance.now() : Date.now();\r\n  }\r\n\r\n  /**\r\n   * Generates the value for an SVG arc.\r\n   * @param  {number}  current       Current value.\r\n   * @param  {number}  total         Maximum value.\r\n   * @param  {number}  pathRadius    Radius of the SVG path.\r\n   * @param  {number}  elementRadius Radius of the SVG container.\r\n   * @param  {boolean=false} isSemicircle  Whether the element should be a semicircle.\r\n   * @return {string}\r\n   */\r\n  getArc(current: number, total: number, pathRadius: number,\r\n         elementRadius: number, isSemicircle = false): string {\r\n\r\n    let value = Math.max(0, Math.min(current || 0, total));\r\n    let maxAngle = isSemicircle ? 180 : 359.9999;\r\n    let percentage = (value / total) * maxAngle;\r\n    let start = this._polarToCartesian(elementRadius, pathRadius, percentage);\r\n    let end = this._polarToCartesian(elementRadius, pathRadius, 0);\r\n    let arcSweep = (percentage <= 180 ? 0 : 1);\r\n\r\n    return `M ${start} A ${pathRadius} ${pathRadius} 0 ${arcSweep} 0 ${end}`;\r\n  };\r\n\r\n  /**\r\n   * Converts polar cooradinates to Cartesian.\r\n   * @param  {number} elementRadius  Radius of the wrapper element.\r\n   * @param  {number} pathRadius     Radius of the path being described.\r\n   * @param  {number} angleInDegrees Degree to be converted.\r\n   * @return {string}\r\n   */\r\n  private _polarToCartesian(elementRadius: number, pathRadius: number,\r\n    angleInDegrees: number): string {\r\n\r\n    let angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n    let x = elementRadius + (pathRadius * Math.cos(angleInRadians));\r\n    let y = elementRadius + (pathRadius * Math.sin(angleInRadians));\r\n\r\n    return x + ' ' + y;\r\n  }\r\n};\r\n"]}